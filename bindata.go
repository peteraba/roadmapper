// Code generated by go-bindata. DO NOT EDIT.
// sources:
// migrations/01_init.sql (583B)
// templates/index.html (9.231kB)

package main

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _migrations01_initSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x92\x41\x6b\xbb\x40\x14\xc4\xef\x7e\x8a\xc1\x4b\x12\xfe\xff\x40\xef\x81\x82\xd5\x17\x1a\x2a\x2b\x35\x4a\x7b\x93\x8d\xfb\x1a\x36\x44\x57\x76\x37\x69\x3f\x7e\x49\x1a\xad\x4d\x29\xb4\xd7\x79\xfe\x66\x86\x71\xe7\x73\xfc\x6b\xf4\xd6\x4a\xcf\x28\xbb\x20\x88\x73\x8a\x0a\x42\x11\xdd\xa5\x84\xd0\x1a\xa9\x1a\xd9\xb9\x10\xd3\x00\x00\x42\xad\x42\x6c\xf4\x56\xb7\x1e\x22\x2b\x20\xca\x34\x45\x29\x56\x8f\x25\x21\xce\xc4\xba\xc8\xa3\x95\x28\xd0\x19\xa7\xbd\x3e\x72\xa5\x15\xe2\x7b\x8a\x1f\x30\xd5\x0a\xb7\xb8\x99\xfd\xff\xb0\xe9\x2c\x1f\xab\xb1\xd7\xc9\x27\xa7\x25\xe5\x24\x62\x5a\xa3\xcf\x3d\x71\x3d\xa3\xa4\xe7\xea\xc5\xd8\x46\xfa\x10\x9e\xdf\x3e\x1b\x5c\x3e\xd8\x48\xc7\xd5\xc1\xee\xaf\xae\x48\x68\x19\x95\x69\x81\xc9\x64\x48\x37\x3b\xae\xbd\x0b\xb1\x73\xa6\xdd\x5c\xd4\x46\xef\xd9\x79\xd3\xf2\x95\x5e\x5b\x96\x9e\x55\x75\x8e\xd5\x0d\x3b\x2f\x9b\xee\xbb\xbb\xc8\x9e\xa6\x7d\xd5\x43\xa7\xfe\x8a\xc8\xba\x66\xe7\x7e\xc9\x04\xb3\xc5\xf0\xa7\x56\x22\xa1\xe7\x61\xb0\xea\xb2\x2c\x32\x31\x1a\xb1\x17\xa3\x75\x3c\x5b\xfc\x00\x8e\x0a\x7c\x85\xc7\x87\x84\xce\x0e\xc1\xf8\xd5\x24\xe6\xb5\x0d\xde\x03\x00\x00\xff\xff\x48\x00\x38\x3d\x47\x02\x00\x00")

func migrations01_initSqlBytes() ([]byte, error) {
	return bindataRead(
		_migrations01_initSql,
		"migrations/01_init.sql",
	)
}

func migrations01_initSql() (*asset, error) {
	bytes, err := migrations01_initSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "migrations/01_init.sql", size: 583, mode: os.FileMode(0644), modTime: time.Unix(1586313072, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x9a, 0x1e, 0xbb, 0x3d, 0x86, 0xe5, 0x95, 0x6f, 0x9e, 0xa0, 0x15, 0x81, 0xc6, 0x55, 0x9d, 0xea, 0xb9, 0x81, 0x6f, 0x50, 0xc8, 0x77, 0x8c, 0xf2, 0x77, 0xba, 0xa6, 0x3e, 0x1e, 0x92, 0x1c, 0xc3}}
	return a, nil
}

var _templatesIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x3a\x6b\x57\xdc\xb6\xb6\xdf\xf9\x15\xaa\x7a\x56\x49\xce\xc1\x63\x86\x24\x5c\x5a\xc6\xbe\x2b\x90\x90\x90\x92\x84\x06\x08\x4d\xba\xba\xce\xda\xb6\xb6\x6d\x31\xb2\x64\x24\x79\x1e\xe5\xf0\xdf\xef\x92\x1f\xf3\xf4\x50\x6e\x9b\xc3\x07\xc6\xde\xda\xda\x0f\xed\xa7\x24\x0f\xbe\x63\x2a\xb6\xd3\x02\x49\x66\x73\x11\x6e\x0d\xdc\x0f\x11\x20\xd3\x80\xa2\xa4\x0e\x80\xc0\xc2\x2d\x42\x08\x19\x7c\xe7\x79\xe4\x13\xde\x96\x5c\x23\x23\x39\x5a\x20\x16\x52\x43\x3c\xaf\x19\xaf\x40\x71\x06\xda\xa0\x0d\x68\x69\x13\xef\x80\x2e\x0e\x49\xc8\x31\xa0\x23\x8e\xe3\x42\x69\x4b\x49\xac\xa4\x45\x69\x03\x3a\xe6\xcc\x66\x01\xc3\x11\x8f\xd1\xab\x5e\x76\x08\x97\xdc\x72\x10\x9e\x89\x41\x60\xd0\xdf\x21\x26\xd3\x5c\x0e\x3d\xab\xbc\x84\xdb\x40\x2a\x1a\x6e\xcd\xc5\x3a\x52\xca\x1a\xab\xa1\x98\x4b\x23\xb8\x1c\x12\x8d\x22\xa0\xc6\x4e\x05\x9a\x0c\xd1\x52\x92\x69\x4c\x02\x9a\x59\x5b\x98\x9f\x7c\x3f\x66\xf2\xc6\xf4\x62\xa1\x4a\x96\x08\xd0\xd8\x8b\x55\xee\xc3\x0d\x4c\x7c\xc1\x23\xe3\xdb\x31\xb7\x16\xb5\x17\xb5\xd4\xfd\xe7\xbd\xe7\xbd\xbe\x1f\x1b\xe3\xcf\x60\xbd\x9c\xcb\x5e\x6c\x0c\x25\x5c\x5a\x4c\x35\xb7\xd3\x80\x9a\x0c\xf6\x5e\xec\x7b\x67\xfe\xf5\x8b\xeb\xe4\x36\x81\x5d\xc3\x8e\x3e\x9c\xfe\xfc\xe1\xc7\xf8\xcd\xfe\x2f\x2f\x5f\x9c\xec\xdd\x4e\x9e\xdf\x9e\x1e\xe7\x57\x7b\x9f\xd3\x33\x5d\x8e\x7e\xfc\x12\x50\x12\x6b\x65\x8c\xd2\x3c\xe5\x32\xa0\x20\x95\x9c\xe6\xaa\x34\x94\xf8\x0b\xeb\x7f\xa2\xa4\x25\x2f\xc7\x68\x54\x8e\xdf\x54\xd7\x44\x49\xeb\x41\x4d\xd8\x7f\xd1\xeb\xef\x35\x7a\x82\x10\x0f\x69\x98\xe7\xe9\xd9\xf0\xf8\xcb\xd9\xd5\x2f\xd1\xaf\x72\xf7\xa8\x7f\xf1\xe9\xf6\x8f\xb7\xa0\xf7\xd9\xb1\x1c\xfd\xa8\xbe\x9e\x9c\xbf\x3e\xee\xa7\xfd\x78\x2c\x86\xc3\x47\x6a\x78\x5c\x1a\xab\xf2\xc7\xe9\xe6\x1b\x0b\x96\xc7\xbe\x56\xc0\x72\x28\x50\x57\x62\xb6\x8e\x61\xb9\x15\x18\xde\xdd\xf5\x2e\xdd\xc3\xfd\xfd\xc0\xaf\x21\x0b\x7e\x73\x02\x23\x1e\x2b\x49\x12\xad\x72\xd2\xae\x54\x52\x03\x7b\x5c\xb5\x8f\x5e\x8a\x12\x35\x58\xa5\x7d\xf2\x9b\xde\x21\x5a\x95\x92\x21\xdb\x21\xa0\xe3\x8c\x8f\x14\x89\x04\xc4\xc3\x1d\xd2\x7f\xb1\xbb\x43\xbe\x7f\xf6\xfc\x19\x3c\x77\x0f\x49\x92\xfc\xde\xa5\x08\x14\x85\x40\xcf\xaa\x32\xce\x3c\x47\x9e\x12\xc3\xff\x40\x13\xd0\xfe\xc1\xee\xa4\x7f\xb0\xbb\xaa\xde\x2a\x7e\xaf\x90\x29\x5d\xa3\x5a\x53\x72\xc1\x1c\x50\x9e\x43\x8a\xbe\x43\x6b\x49\x3f\xdb\x9b\x3c\xdb\x5b\x25\xdc\xaa\x57\x0d\xfe\x15\xaa\xfd\xfd\x49\x7f\x7f\x13\xd5\x6a\xb0\x9b\x6a\x0e\x92\x27\x68\xd6\x0c\x69\xb8\xc5\xde\x18\xa3\xd9\x78\x63\xac\xbb\x3b\xc2\x13\xd2\x7b\x0f\x56\xe5\xea\x95\xca\x81\x4b\x72\x7f\x5f\x0d\xcd\x6c\x59\x0f\xce\xd6\xbb\x82\x9b\x58\xf3\xc2\x36\xe2\x5b\x9c\x58\xff\x06\x46\x50\x43\xe9\x1c\xcf\xfd\x8d\x40\x93\x7f\x17\x70\x4b\x02\x32\xe6\x92\xa9\x71\xaf\x7a\xfb\xcf\x7f\xc8\x6f\xbf\x1f\x2e\x61\xfa\xff\x24\x56\x43\x3c\x44\xed\xb2\x60\xa6\x98\x21\x82\x0f\x91\x50\x83\xb6\xf6\xde\x57\x3c\x47\x69\x78\x65\xd9\x4c\x95\x82\x91\x08\x49\x0c\x42\xa0\x7b\x4a\x94\x46\x42\x2b\x12\xe7\x90\xe2\x67\x8e\x63\x4a\xfe\xe9\x2f\xf1\x70\xbc\x7b\x45\x69\xb2\x27\xbf\x6d\x2f\x61\x6e\xff\xfe\xf4\x70\x23\x26\x4a\x88\x04\x9e\x71\x39\xbc\x74\x73\xb8\x4c\xd7\xd0\x9f\x24\xa5\x8c\x2d\x57\xf2\xc9\x53\x72\xb7\x34\xd2\x2e\x42\x19\x50\xdf\xbf\xbb\x5b\x5b\x6d\x9f\x1e\xae\xe1\x2f\x32\x37\x68\x2f\xeb\x65\xb9\xd2\x62\x7b\x87\x94\xff\xda\xce\x2b\x0a\xbd\x22\x2b\xd6\xe4\xe8\x98\x7d\xc1\x2d\x9e\xb2\xed\x1d\xb2\xdd\xef\x44\x77\xc2\xb1\x80\xa9\xb8\xcc\x51\xda\x1d\x92\x06\xac\x17\x6b\x04\x8b\xaf\x05\x3a\xd0\x93\xed\xda\xb2\xdb\x4f\x77\x88\x09\x58\x2f\x45\xdb\x8c\x98\xa3\xe9\x25\xa4\x1f\x20\xc7\x39\xce\x6f\xbb\xbf\xaf\xf3\x48\x7b\x95\xaf\x6c\xaf\xf8\xca\xf6\x21\x49\x7b\x60\xa6\x32\x0e\xac\x2e\xd1\xbd\x31\x4c\x50\xcf\xde\x8c\x8e\x83\xb9\xc2\x37\x66\xfb\x90\x98\x5e\x01\x1a\xa5\xfd\xa0\x18\xf6\xb8\x34\xa8\xed\x51\x65\xfb\x27\xe9\x8e\x59\x51\xef\xfe\xe9\x93\x05\xc8\xc0\xaf\xb9\x2e\x38\xb2\x54\x0d\x68\x50\x84\x03\x9e\xa7\xc4\x31\xdc\x60\xa7\xf9\xaa\xff\x2f\x67\x2e\xa2\x82\xfe\x0f\x90\x17\x87\x1a\xe3\xa0\x4f\x49\x95\x46\x03\x1a\x29\xcd\x50\xff\xb4\x7b\x48\x09\x08\x1b\x50\x97\x85\x07\x7e\x11\x0e\xfc\x19\xaf\xe5\xf8\x7a\x2d\x59\x1b\x63\xc7\x8a\xcd\xab\xcf\xdd\x1d\x41\xc9\x5c\x38\x6e\x0d\xfc\xba\x5d\x18\x44\x8a\x4d\xc3\xad\x81\x84\x11\x89\x05\x18\x13\x50\x09\xa3\x08\x34\x31\x96\xc7\xc3\xa9\x67\x55\x41\x6a\x88\x87\x93\x02\x24\xf3\x44\xda\x02\x18\xe8\x21\x89\xd2\xea\xb7\xcd\x1c\xb0\x4c\xc6\x8b\x34\x48\x36\x4b\x1e\x34\xd4\x2c\x2f\x7a\x50\x14\x64\x60\x72\x10\x22\x7c\x02\xa2\xc8\xe0\xe9\xc0\xaf\x5f\x07\x3e\x34\x84\xa2\xd2\x5a\x25\x57\xa8\x59\x95\xa6\x02\x75\x9b\xe6\x6a\x1c\x4a\x18\x58\x68\xc6\x02\x1a\x2b\x21\xa0\x30\xd8\x82\x41\xa7\xae\xcb\xf9\xbe\x26\xf1\x01\x46\x2f\x85\x7d\x0f\x7a\x58\x16\x94\x80\xe6\xe0\xb9\xee\x46\x2b\x31\xe3\xd2\x81\x52\xab\x8e\x2c\xa0\x09\x08\x47\xba\x82\x0a\x88\x5c\x8a\xbc\xac\x18\xbb\x45\xe1\x29\xb8\x80\xa5\x8b\x79\xad\x80\x0d\x4a\xd4\x05\x25\x1c\xf8\x0e\xa5\x51\xda\xaf\x35\x6a\xde\x18\x9f\x19\xa5\x55\xaa\x5d\xfa\xb9\x92\x9c\x75\xca\xbd\x20\xc2\x02\x99\x66\xb6\xb3\x76\xae\x3d\x28\xad\x5a\xc9\xad\x4b\xf6\xf3\xb8\xc5\xdc\x71\xf4\xea\x7a\x50\xd7\x6e\x8f\x81\xc9\x22\x05\x9a\x55\xe0\xd6\xb6\xdf\xaf\x0d\xd3\xf0\x33\x37\x25\x08\x32\xe0\x2d\xd1\x04\x0c\x49\xc0\xc3\x29\x3a\xc5\xf9\xdc\xdc\x8f\xe0\xbf\xc6\x08\x19\xb7\x34\x7c\xcd\xb8\xed\xe0\x50\x8d\xfd\x55\x16\x2e\x56\x5f\xa9\xf8\x08\x0c\x5e\x69\xe1\x22\x15\x22\x55\x5a\xbf\x75\x5e\x9f\x92\xd6\xad\xfe\x1d\x09\x90\x43\x1a\xbe\x74\x08\xeb\x72\xdc\x96\x68\x9c\x4b\x78\x31\xd7\xb1\xf8\x1b\x5a\xaf\x8b\xb4\x2e\xc3\x2b\x15\x9b\x75\x11\x22\xa5\x86\xdf\x92\x6f\xa1\xf9\x08\xe2\x69\xfb\xeb\x15\x4a\xf0\x78\xda\x25\x0e\x58\x20\xe7\x35\xd6\xba\x58\xa5\x41\xed\x19\x8c\x35\xfe\x0d\x43\xb5\x8d\x60\xca\x6d\x56\x46\x55\xa3\x5c\xa0\x45\x0d\x11\xb4\xad\x66\x51\xa5\x8b\x15\xd1\x2e\x54\xa9\x63\xac\xb3\xe3\x9a\x64\xb1\x62\x58\xe5\xad\x38\xeb\x90\x6c\xe0\x33\x3e\xfa\xb3\xe8\xda\x18\x55\x91\x95\x24\xb2\xd2\x13\x3c\xcd\xec\x42\x5a\xfc\x80\xe3\x75\x41\x0a\x51\x9a\xcd\x8e\xb3\x20\x48\xf3\x38\xf0\x25\x8c\xc2\xad\xad\xa6\x07\xbb\x40\x91\xbc\x55\xc6\x22\x6b\x3b\xb0\x45\x61\x73\xc5\x40\x90\x04\x58\x93\x43\x96\xcd\xe9\x96\x2c\xe2\x92\xe1\x24\xa0\x5e\x9f\x12\xad\x5c\x6a\x65\x1c\x84\x4a\x17\xb3\x9f\x40\x16\x4d\x6b\x62\x9e\x50\x32\xf5\xaa\xc6\xbd\xc1\xc8\x38\x63\x28\xdb\x9c\xd9\xbd\x66\x95\x18\x5e\x4d\x98\x2c\xbe\x78\x31\x4a\x8b\x1a\xd9\x8c\x79\xd3\x4e\xac\xae\xed\x1a\xb1\x66\xb7\xba\x82\xd7\x8d\xeb\xaa\x20\xea\x0e\xd4\x0a\x3d\x7b\xbe\x8c\xdd\x28\xe7\x96\xab\x06\x2c\xa8\x1c\xae\x99\xcf\x64\x1c\x05\xf3\x40\x34\x0e\x4e\x9a\x80\x50\x16\xab\xbe\x6e\xe0\x67\xcf\x37\x30\x6e\x8a\xdf\x72\x95\x6b\x4b\x81\x50\xb3\xe2\xc6\xb8\xc9\xf9\x4c\xbe\xe5\xb2\x74\x5c\xe1\x75\x33\x20\xb3\xd2\xb4\x64\x28\xd7\x23\xd1\xf0\x07\xcb\x73\x34\x87\x8b\x85\x69\x6d\xee\x52\xa1\x5a\x1e\x59\x0a\x8f\xcd\x2b\xef\x1a\x8f\x4d\xeb\x5e\x84\xe7\x02\xc1\x20\x61\x8a\x48\x65\x89\xb1\xae\x11\x37\xae\x53\xb7\x7c\x84\x95\xee\x44\x49\x17\x57\xcb\x79\x60\x9e\xa0\xc3\x35\x90\x0b\x9e\xde\x20\xd2\x9b\x57\xe4\xa5\x25\x36\x43\x92\x2b\xe7\x66\x84\x5b\xc2\x0d\x71\xad\x9a\x98\x12\x20\x03\x63\xb5\x92\x69\x68\x31\xce\x08\xc3\x5c\x0d\xfc\x06\xd2\x51\x7d\x26\xb1\x80\xbc\xe9\x05\xaa\xc0\x8d\x74\xf8\x20\xeb\x46\xdf\xd2\xe0\xba\x52\x7f\x92\xdc\xc2\x4f\xb3\x67\xa7\x22\xe1\xd2\x58\x04\xb6\xb3\x91\x97\xd2\x44\x23\x30\xa2\x4a\x3d\x67\xf6\x5f\xcb\xf3\x38\xb1\xa8\xa5\x8b\x15\x2e\x87\xf3\x60\xe8\xad\xa5\xfb\xb9\x07\x15\x7f\xc3\xad\x12\xa5\xec\xe6\x80\x7e\x28\xae\xe6\xa9\xd9\xd5\x97\xf5\x94\xe8\x19\x18\x21\x0d\x4f\x49\x29\x19\x6a\x63\x41\xb2\x1d\x72\x4a\x0a\xad\x72\x6e\xf0\xbb\xcd\x21\xf1\x68\xce\x85\xe6\x39\xe8\x69\x27\x73\x57\xc3\x3f\xfe\xdc\xfb\x7f\x05\xde\x6a\xa9\x5a\x2b\x18\x8b\x1b\x82\xa5\x66\x53\x5a\xe0\x12\xb5\x97\x88\x92\xb3\xf5\xc6\x8f\x98\x3a\x83\xd5\x92\x76\x34\x7e\x35\x93\xac\xdf\x52\xcc\xfa\x34\xfc\x41\x46\xa6\x38\x1c\xf8\x59\xbf\x19\x2e\x96\x66\x9b\x51\x4a\xc3\x99\xed\x17\xc5\xd1\x6a\x4c\x16\xb0\xda\x7e\x7d\x43\x41\x89\x95\xf0\x9e\xaf\xd6\x88\x44\xe9\x7c\xe6\x97\x4a\xe7\x1e\x97\x82\xcb\xae\xec\x38\xa8\xb2\x27\x49\x94\x0e\x28\xcf\xd3\xfa\x90\x73\x66\xa9\x7c\xea\xf5\x5d\xe7\xbc\x47\xc3\x6b\x37\x30\xf0\x2b\xf4\x0e\x32\x5c\x16\x65\x7b\x9c\x21\xcb\x3c\x72\x5d\x88\xb1\x58\x04\xb4\xbf\xbb\x5b\xaf\xdb\x02\xf9\x9c\xcb\x80\x1e\xb8\x81\x1c\x26\x01\x7d\xb6\xbb\xeb\x9e\x47\x20\x4a\x6c\xe0\x2b\x02\x98\xdc\xdb\xa3\x84\x71\x03\x91\x40\xf6\x70\x60\xc4\xd5\x49\x47\xbb\x6c\xa4\x7d\xcd\x30\x1e\x46\x6a\x42\x96\x48\x6e\xf0\xde\x45\x6d\xda\x89\xb4\x9b\xbe\x57\xe1\xae\x68\xe8\xd5\xe7\x1d\x6c\x13\xfd\x7a\xd1\xbb\xe9\x55\x63\x74\xc5\x22\x73\x82\xef\x41\xba\x3d\xc6\xf8\x61\x73\x74\x05\x87\x73\x84\xcd\x7d\x5d\x31\x77\xbf\xc6\xbd\xd5\x58\x0a\x05\xcc\xab\x23\xd0\x10\xe7\x69\x07\x7f\xda\xe9\xcd\x82\x7a\x9e\x67\x8f\x4b\xad\x51\xda\x36\xcf\xca\xb4\xa9\xe6\x09\x17\xe8\x84\x02\x1b\xd0\xea\x30\xee\xfc\xc3\x1b\xd2\xb2\x7d\xa0\x3d\x6e\x59\x19\x8c\x95\x64\x0f\x32\x73\x51\xb6\xce\xac\x8a\xbd\x8b\xcf\xdf\x9a\xd9\x4d\xd1\xc5\xcc\x41\xc3\x77\xe7\xdf\x9a\x59\xca\x93\x0e\x66\x0e\x1a\xbe\x39\x3d\xf9\xc6\xcc\x0a\xd6\xc5\xcc\x41\xc3\xf3\x57\x1b\x98\xcd\x73\xdb\x42\x1e\xce\xf4\x2c\x45\xba\xa2\xd5\x0c\x75\x67\x63\xb2\xb8\xf1\xed\x4e\xc1\xf5\xb6\xb7\x2b\xfb\x9e\x28\x9d\x2f\xe4\xde\x2a\x21\x42\x45\x21\xa0\xb4\x39\x1d\x0d\xe8\xf9\xc7\x8b\xcb\x65\x8a\x0e\x71\x43\xa6\xad\x12\x69\xaa\xd5\xd2\x69\x03\x59\xc9\xa1\x76\x62\x69\xf8\x09\x66\x19\xbc\x33\x44\x07\x16\x27\x16\x34\xc2\x12\xe9\x36\xcf\x57\xf2\x38\x3a\xcd\xbd\x54\xf5\x58\xf5\xad\x0c\x4d\xac\x79\x54\xef\x41\xec\xc4\x7a\x19\x8a\xc2\xed\x17\xc6\x26\xa0\x7b\xbb\x34\x74\x96\x73\xcc\xab\x2b\x85\x86\xc7\xe6\xed\xc3\x08\x04\x67\x5e\x82\xc8\x22\x88\x87\x33\xbe\x5e\x05\x77\xc5\x69\x3d\x89\x2c\xcc\xe6\x72\xd3\xfc\x66\xa4\x9b\x42\x75\xee\x35\x43\xad\x15\x58\x5c\x05\x27\x36\x71\xff\xbc\xbc\xb4\x2e\xe1\x3d\xd0\xb2\x95\x06\x52\xf4\x6b\x77\xf4\x6b\x9b\x83\x25\xed\xc6\x09\xea\x4d\x07\x84\xed\x61\xdb\x63\xf6\xb4\x8f\x32\x32\x03\x8b\x5e\xcd\xb6\x6a\x07\x91\xd4\x2f\xdd\xc6\x36\x28\x30\xb6\x95\xca\x8b\x13\x1b\xeb\x3a\xd0\x49\x03\xe9\xf2\x86\xf5\xe4\x7e\x77\xa7\x41\xa6\x48\xfe\x31\x02\x41\x7e\x0a\x48\xef\xd5\x8c\x84\x59\xbc\x7b\x58\x12\x42\x15\x6e\x35\xda\x12\x7b\x77\x57\xcf\xbe\xbf\xa7\xf5\xe6\x19\x6f\x6b\xc0\x3f\x16\x88\x91\xfb\x7b\x52\xcb\x8e\x6c\xd6\x39\x39\x17\xab\xf6\xc9\x4b\xa8\xef\xa1\x68\x09\x0e\xfc\x9a\x55\x97\xdc\x28\xd9\x8a\x7c\x03\xbf\xe6\xf0\xed\x6c\x13\x81\x41\xaf\xd4\x82\x86\xce\x51\xc8\xd5\xa7\xb3\x6e\xab\xd4\x25\x7e\x63\xfc\xcd\xc8\x34\x66\x8a\x6a\xaf\x6b\x4f\x62\xab\x91\xf5\x98\x6c\x67\x35\x7e\x3d\x5f\xed\xde\xdc\x6b\x67\x97\x8a\x1d\x21\xb1\x32\xff\xc1\xb8\xb8\xfa\x74\x46\xac\x22\x85\xc6\xc2\x99\x26\x51\xda\x29\x6b\x08\x97\x64\xea\xb6\x3a\xb3\x04\xf4\x27\xce\xbf\xd4\xa9\x9b\x32\xca\xb9\x7d\xb8\x53\xaf\xc4\x69\x10\xc3\x0b\x18\x75\x1c\x29\xd5\x5b\x87\xfa\x08\x67\xb5\x81\x7f\xd4\xd6\x80\x39\x0f\xd7\x4d\x6a\x46\x83\xd6\x8b\xac\xa4\xe1\x27\xf7\xb8\xce\xce\x6a\x30\xd9\xdf\xe2\xc7\x65\xa2\x6a\x6e\x55\xcb\x83\x13\xc8\x0b\x81\x35\xd3\x33\x05\x8c\x34\x90\x47\x9f\x78\x2e\x1d\x6c\x2f\xb4\x5e\x1b\x2b\xe0\xe2\xcd\x46\xac\xa4\xb1\x24\x03\xd3\x6c\x75\x49\x40\x9c\x0f\xbd\x9d\x03\xee\xef\x0f\xb7\xe6\x97\x31\x5b\xd5\x35\xc8\xc7\x2a\xee\x40\x90\x77\x30\x82\x8b\xfa\x7e\xd1\xf3\xc2\x7a\xf0\xe6\x97\x12\xf5\x94\x24\x5c\x1b\xbb\xe3\xb6\xfd\x92\x9c\x2b\xb7\x87\xee\xdd\x98\xe6\x7d\xfe\xa9\xc2\xbb\x8b\x7a\x62\x73\x49\x59\xdd\xe8\x3c\xf2\xb6\xfe\xe6\xd6\xf1\xf1\x9f\x55\x9f\x23\xd4\x2f\xd5\x2d\xfd\x4d\xe7\x25\xfd\xf1\xc5\xaf\x4a\xff\x3a\xfa\x1a\x5f\x0e\x81\x4f\xf6\xbf\x8c\xd4\xfe\xdb\xa2\x88\xbf\xbe\x41\x1b\x7d\x79\xff\xe6\xfa\xe2\x44\x1c\x8d\x0f\xde\x26\xc7\xef\xd4\xe6\x4b\xfa\x70\xbe\x10\x7f\x45\xe2\xa2\x5d\x06\xbf\xdf\xeb\xef\xf7\xfa\x7e\x99\xb3\x16\xb8\x59\x72\x9f\xdf\xc4\x1f\xcf\xc6\x27\xc9\xde\xfe\xe4\xf5\x97\x97\x37\xd7\xff\xf3\xe2\x84\xff\xf1\xf3\x67\xf5\xc2\xca\xcb\x2f\xfc\x17\xc6\xce\xbf\xaa\xb3\xab\xb7\x6f\xbf\x1e\xfc\xd7\x24\xdf\xf4\x15\xc8\xcd\xea\x47\x20\xdd\x2a\x5c\xdf\x5e\xf5\xdf\xc1\xe8\x64\x72\xf1\xf2\x7d\x7c\x76\xbe\x77\x7d\xfa\xf1\xf4\x5f\x6f\x8e\xf6\xfe\xb8\xce\x2f\xb2\xf7\xa7\x07\x7b\xf9\x65\x71\xf6\x2a\xbe\x3d\xb9\x4a\x1f\xa7\xc2\xca\x47\x12\xcb\x77\xdc\xb9\x62\xa5\x40\xda\x5c\x0f\xae\x7d\x1e\x91\xdf\x2c\xd3\xf2\x9b\x8b\x3a\xbf\xfe\xfc\xe7\xff\x02\x00\x00\xff\xff\x69\x46\xe1\x30\x0f\x24\x00\x00")

func templatesIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesIndexHtml,
		"templates/index.html",
	)
}

func templatesIndexHtml() (*asset, error) {
	bytes, err := templatesIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/index.html", size: 9231, mode: os.FileMode(0644), modTime: time.Unix(1586694900, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x12, 0x1f, 0x73, 0x70, 0xf1, 0x8c, 0xef, 0xb, 0xcc, 0xbf, 0x9f, 0x7b, 0x46, 0x38, 0x21, 0xbf, 0x97, 0x8a, 0xa4, 0x4b, 0x19, 0x41, 0x87, 0xdd, 0xd5, 0x3e, 0x46, 0x80, 0x69, 0xa3, 0xf9, 0xb2}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"migrations/01_init.sql": migrations01_initSql,
	"templates/index.html":   templatesIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"migrations": &bintree{nil, map[string]*bintree{
		"01_init.sql": &bintree{migrations01_initSql, map[string]*bintree{}},
	}},
	"templates": &bintree{nil, map[string]*bintree{
		"index.html": &bintree{templatesIndexHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
